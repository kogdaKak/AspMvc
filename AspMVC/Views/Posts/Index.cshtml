@using static AspMVC.Scripts.Classes.Enums.PublicEnums
@model List<AspMVC.Models.Post>

@{
    ViewData["Title"] = "Лента постов";
    var pageSize = ViewBag.PageSize ?? 6;
}

<!-- sentinel для IntersectionObserver -->
<div id="scrollSentinel" style="height:1px;"></div>

<div class="container mt-4">
    <div class="row">
        @foreach (var post in Model)
        {
            <div class="col-md-4 post-card">
                <div class="card shadow-sm">
                    @if (!string.IsNullOrEmpty(post.MediaUrl))
                    {
                        if (post.MediaType == MediaType.Image)
                        {
                            <img src="@post.MediaUrl" class="card-img-top" />
                        }
                        else if (post.MediaType == MediaType.Video)
                        {
                            <video controls preload="none" class="card-img-top">
                                <source src="@post.MediaUrl" type="video/mp4" />
                                Ваш браузер не поддерживает видео.
                            </video>
                        }
                    }
                    <div class="card-body">
                        <p class="card-text">@post.Description</p>
                        @if (!string.IsNullOrEmpty(post.PubRuls))
                        {
                            <a href="@post.PubRuls" class="btn btn-primary source-link" target="_blank">Ссылка на источник</a>
                        }
                    </div>
                    <div class="card-footer text-muted">
                        @post.CreatedAt.ToString("g")
                    </div>
                </div>
            </div>
        }
    </div>
</div>


<!-- Простая ссылка на форму создания поста (для теста) -->
<p><a href="@Url.Action("Create", "Posts")">Создать тестовый пост</a></p>

<!-- Скрипт бесконечного скролла -->
<script>
    // Текущая страница, уже загруженная на странице (1 => первая)
    let currentPage = 1;
    const pageSize = @pageSize; // int подставляется сервером
    let loading = false;        // чтобы не делать параллельных запросов

    // Контейнер и сенсоры
    const container = document.getElementById('postsContainer');
    const sentinel = document.getElementById('scrollSentinel');

    // Функция подгрузки следующей страницы
    async function loadNext() {
        if (loading) return;
        loading = true;
        currentPage++;

        try {
            // Запросим HTML частичного представления с сервера
            const res = await fetch(`/Posts/List?page=${currentPage}`);
            if (!res.ok) {
                console.error('Ошибка загрузки:', res.status);
                loading = false;
                return;
            }

            const html = await res.text();

            // Если сервер вернул пустую строку — постов больше нет => отключаем observer
            if (!html || html.trim().length === 0) {
                observer.disconnect();
                loading = false;
                return;
            }

            // Вставляем полученный HTML в конец контейнера
            container.insertAdjacentHTML('beforeend', html);
        } catch (err) {
            console.error('Ошибка при fetch:', err);
        } finally {
            loading = false;
        }
    }

    // Создаём IntersectionObserver, чтобы наблюдать sentinel
    const observer = new IntersectionObserver((entries) => {
        // Если sentinel виден — запускаем подгрузку
        if (entries[0].isIntersecting) {
            loadNext();
        }
    }, {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
    });

    // Начинаем наблюдение
    observer.observe(sentinel);

    // (Опционально) fallback для старых браузеров можно реализовать через onscroll
</script>
